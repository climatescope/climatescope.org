{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"License\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Copyright\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Climatescope is a unique country-by-country assessment, interactive report and index that evaluates the investment condition for clean energy in 136 markets globally. It adheres to an open source and open data policy, providing access to data that are free for everyone. The tool is intended for use by investors, companies, governments, NGOs, researchers, communities, and others seeking to assess the opportunities of investing in green energy.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Disclaimer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The information contained in this publication is derived from carefully selected public sources we believe are reasonable. We do not guarantee its accuracy or completeness and nothing in this document shall be construed to be a representation of such a guarantee. Any opinions expressed reflect the current judgment of the author of the relevant article or features, and does not necessarily reflect the opinion of BloombergNEF. The opinions presented are subject to change without notice. BloombergNEF accepts no responsibility for any liability arising from use of this document or its contents. BloombergNEF does not consider itself to undertake Regulated Activities as defined in Section 22 of the Financial Services and Markets Act 2000 and is not registered with the Financial Services Authority of the UK.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"License","layout":"about"},"scope":{}}},"__N_SSG":true}